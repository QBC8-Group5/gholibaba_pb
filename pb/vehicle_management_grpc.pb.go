// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VehicleManagementServiceClient is the client API for VehicleManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VehicleManagementServiceClient interface {
	CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*CreateVehicleResponse, error)
	RequestVehicleForTrip(ctx context.Context, in *RequestVehicleForTripRequest, opts ...grpc.CallOption) (*RequestVehicleForTripResponse, error)
	MatchVehicle(ctx context.Context, in *MatchVehicleRequest, opts ...grpc.CallOption) (*MatchVehicleResponse, error)
}

type vehicleManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVehicleManagementServiceClient(cc grpc.ClientConnInterface) VehicleManagementServiceClient {
	return &vehicleManagementServiceClient{cc}
}

func (c *vehicleManagementServiceClient) CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*CreateVehicleResponse, error) {
	out := new(CreateVehicleResponse)
	err := c.cc.Invoke(ctx, "/VehicleManagementService/CreateVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleManagementServiceClient) RequestVehicleForTrip(ctx context.Context, in *RequestVehicleForTripRequest, opts ...grpc.CallOption) (*RequestVehicleForTripResponse, error) {
	out := new(RequestVehicleForTripResponse)
	err := c.cc.Invoke(ctx, "/VehicleManagementService/RequestVehicleForTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleManagementServiceClient) MatchVehicle(ctx context.Context, in *MatchVehicleRequest, opts ...grpc.CallOption) (*MatchVehicleResponse, error) {
	out := new(MatchVehicleResponse)
	err := c.cc.Invoke(ctx, "/VehicleManagementService/MatchVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VehicleManagementServiceServer is the server API for VehicleManagementService service.
// All implementations must embed UnimplementedVehicleManagementServiceServer
// for forward compatibility
type VehicleManagementServiceServer interface {
	CreateVehicle(context.Context, *CreateVehicleRequest) (*CreateVehicleResponse, error)
	RequestVehicleForTrip(context.Context, *RequestVehicleForTripRequest) (*RequestVehicleForTripResponse, error)
	MatchVehicle(context.Context, *MatchVehicleRequest) (*MatchVehicleResponse, error)
	mustEmbedUnimplementedVehicleManagementServiceServer()
}

// UnimplementedVehicleManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVehicleManagementServiceServer struct {
}

func (UnimplementedVehicleManagementServiceServer) CreateVehicle(context.Context, *CreateVehicleRequest) (*CreateVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVehicle not implemented")
}
func (UnimplementedVehicleManagementServiceServer) RequestVehicleForTrip(context.Context, *RequestVehicleForTripRequest) (*RequestVehicleForTripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVehicleForTrip not implemented")
}
func (UnimplementedVehicleManagementServiceServer) MatchVehicle(context.Context, *MatchVehicleRequest) (*MatchVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchVehicle not implemented")
}
func (UnimplementedVehicleManagementServiceServer) mustEmbedUnimplementedVehicleManagementServiceServer() {
}

// UnsafeVehicleManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VehicleManagementServiceServer will
// result in compilation errors.
type UnsafeVehicleManagementServiceServer interface {
	mustEmbedUnimplementedVehicleManagementServiceServer()
}

func RegisterVehicleManagementServiceServer(s *grpc.Server, srv VehicleManagementServiceServer) {
	s.RegisterService(&_VehicleManagementService_serviceDesc, srv)
}

func _VehicleManagementService_CreateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleManagementServiceServer).CreateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VehicleManagementService/CreateVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleManagementServiceServer).CreateVehicle(ctx, req.(*CreateVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleManagementService_RequestVehicleForTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVehicleForTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleManagementServiceServer).RequestVehicleForTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VehicleManagementService/RequestVehicleForTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleManagementServiceServer).RequestVehicleForTrip(ctx, req.(*RequestVehicleForTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleManagementService_MatchVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleManagementServiceServer).MatchVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VehicleManagementService/MatchVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleManagementServiceServer).MatchVehicle(ctx, req.(*MatchVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VehicleManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "VehicleManagementService",
	HandlerType: (*VehicleManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVehicle",
			Handler:    _VehicleManagementService_CreateVehicle_Handler,
		},
		{
			MethodName: "RequestVehicleForTrip",
			Handler:    _VehicleManagementService_RequestVehicleForTrip_Handler,
		},
		{
			MethodName: "MatchVehicle",
			Handler:    _VehicleManagementService_MatchVehicle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vehicle_management.proto",
}
