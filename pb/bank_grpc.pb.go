// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BankServiceClient is the client API for BankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankServiceClient interface {
	LinkBankAccount(ctx context.Context, in *LinkBankAccountRequest, opts ...grpc.CallOption) (*LinkBankAccountResponse, error)
	InitiateBankTransfer(ctx context.Context, in *InitiateBankTransferRequest, opts ...grpc.CallOption) (*InitiateBankTransferResponse, error)
}

type bankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankServiceClient(cc grpc.ClientConnInterface) BankServiceClient {
	return &bankServiceClient{cc}
}

func (c *bankServiceClient) LinkBankAccount(ctx context.Context, in *LinkBankAccountRequest, opts ...grpc.CallOption) (*LinkBankAccountResponse, error) {
	out := new(LinkBankAccountResponse)
	err := c.cc.Invoke(ctx, "/BankService/LinkBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) InitiateBankTransfer(ctx context.Context, in *InitiateBankTransferRequest, opts ...grpc.CallOption) (*InitiateBankTransferResponse, error) {
	out := new(InitiateBankTransferResponse)
	err := c.cc.Invoke(ctx, "/BankService/InitiateBankTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankServiceServer is the server API for BankService service.
// All implementations must embed UnimplementedBankServiceServer
// for forward compatibility
type BankServiceServer interface {
	LinkBankAccount(context.Context, *LinkBankAccountRequest) (*LinkBankAccountResponse, error)
	InitiateBankTransfer(context.Context, *InitiateBankTransferRequest) (*InitiateBankTransferResponse, error)
	mustEmbedUnimplementedBankServiceServer()
}

// UnimplementedBankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBankServiceServer struct {
}

func (UnimplementedBankServiceServer) LinkBankAccount(context.Context, *LinkBankAccountRequest) (*LinkBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkBankAccount not implemented")
}
func (UnimplementedBankServiceServer) InitiateBankTransfer(context.Context, *InitiateBankTransferRequest) (*InitiateBankTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateBankTransfer not implemented")
}
func (UnimplementedBankServiceServer) mustEmbedUnimplementedBankServiceServer() {}

// UnsafeBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankServiceServer will
// result in compilation errors.
type UnsafeBankServiceServer interface {
	mustEmbedUnimplementedBankServiceServer()
}

func RegisterBankServiceServer(s *grpc.Server, srv BankServiceServer) {
	s.RegisterService(&_BankService_serviceDesc, srv)
}

func _BankService_LinkBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).LinkBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BankService/LinkBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).LinkBankAccount(ctx, req.(*LinkBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_InitiateBankTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateBankTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).InitiateBankTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BankService/InitiateBankTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).InitiateBankTransfer(ctx, req.(*InitiateBankTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BankService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BankService",
	HandlerType: (*BankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LinkBankAccount",
			Handler:    _BankService_LinkBankAccount_Handler,
		},
		{
			MethodName: "InitiateBankTransfer",
			Handler:    _BankService_InitiateBankTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank.proto",
}
