// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: admin_management.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminManagementService_BanEntity_FullMethodName    = "/AdminManagementService/BanEntity"
	AdminManagementService_UnbanEntity_FullMethodName  = "/AdminManagementService/UnbanEntity"
	AdminManagementService_CheckHistory_FullMethodName = "/AdminManagementService/CheckHistory"
)

// AdminManagementServiceClient is the client API for AdminManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminManagementServiceClient interface {
	BanEntity(ctx context.Context, in *BanEntityRequest, opts ...grpc.CallOption) (*BanEntityResponse, error)
	UnbanEntity(ctx context.Context, in *UnbanEntityRequest, opts ...grpc.CallOption) (*UnbanEntityResponse, error)
	CheckHistory(ctx context.Context, in *CheckHistoryRequest, opts ...grpc.CallOption) (*CheckHistoryResponse, error)
}

type adminManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminManagementServiceClient(cc grpc.ClientConnInterface) AdminManagementServiceClient {
	return &adminManagementServiceClient{cc}
}

func (c *adminManagementServiceClient) BanEntity(ctx context.Context, in *BanEntityRequest, opts ...grpc.CallOption) (*BanEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BanEntityResponse)
	err := c.cc.Invoke(ctx, AdminManagementService_BanEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminManagementServiceClient) UnbanEntity(ctx context.Context, in *UnbanEntityRequest, opts ...grpc.CallOption) (*UnbanEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbanEntityResponse)
	err := c.cc.Invoke(ctx, AdminManagementService_UnbanEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminManagementServiceClient) CheckHistory(ctx context.Context, in *CheckHistoryRequest, opts ...grpc.CallOption) (*CheckHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckHistoryResponse)
	err := c.cc.Invoke(ctx, AdminManagementService_CheckHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminManagementServiceServer is the server API for AdminManagementService service.
// All implementations must embed UnimplementedAdminManagementServiceServer
// for forward compatibility.
type AdminManagementServiceServer interface {
	BanEntity(context.Context, *BanEntityRequest) (*BanEntityResponse, error)
	UnbanEntity(context.Context, *UnbanEntityRequest) (*UnbanEntityResponse, error)
	CheckHistory(context.Context, *CheckHistoryRequest) (*CheckHistoryResponse, error)
	mustEmbedUnimplementedAdminManagementServiceServer()
}

// UnimplementedAdminManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminManagementServiceServer struct{}

func (UnimplementedAdminManagementServiceServer) BanEntity(context.Context, *BanEntityRequest) (*BanEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanEntity not implemented")
}
func (UnimplementedAdminManagementServiceServer) UnbanEntity(context.Context, *UnbanEntityRequest) (*UnbanEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanEntity not implemented")
}
func (UnimplementedAdminManagementServiceServer) CheckHistory(context.Context, *CheckHistoryRequest) (*CheckHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHistory not implemented")
}
func (UnimplementedAdminManagementServiceServer) mustEmbedUnimplementedAdminManagementServiceServer() {
}
func (UnimplementedAdminManagementServiceServer) testEmbeddedByValue() {}

// UnsafeAdminManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminManagementServiceServer will
// result in compilation errors.
type UnsafeAdminManagementServiceServer interface {
	mustEmbedUnimplementedAdminManagementServiceServer()
}

func RegisterAdminManagementServiceServer(s grpc.ServiceRegistrar, srv AdminManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminManagementService_ServiceDesc, srv)
}

func _AdminManagementService_BanEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminManagementServiceServer).BanEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminManagementService_BanEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminManagementServiceServer).BanEntity(ctx, req.(*BanEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminManagementService_UnbanEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbanEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminManagementServiceServer).UnbanEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminManagementService_UnbanEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminManagementServiceServer).UnbanEntity(ctx, req.(*UnbanEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminManagementService_CheckHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminManagementServiceServer).CheckHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminManagementService_CheckHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminManagementServiceServer).CheckHistory(ctx, req.(*CheckHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminManagementService_ServiceDesc is the grpc.ServiceDesc for AdminManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AdminManagementService",
	HandlerType: (*AdminManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BanEntity",
			Handler:    _AdminManagementService_BanEntity_Handler,
		},
		{
			MethodName: "UnbanEntity",
			Handler:    _AdminManagementService_UnbanEntity_Handler,
		},
		{
			MethodName: "CheckHistory",
			Handler:    _AdminManagementService_CheckHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_management.proto",
}
