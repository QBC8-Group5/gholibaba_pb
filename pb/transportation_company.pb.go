// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.21.12
// source: transportation_company.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompanyType int32

const (
	CompanyType_CompanyType_Airline CompanyType = 0
	CompanyType_CompanyType_Bus     CompanyType = 1
	CompanyType_CompanyType_Rail    CompanyType = 2
	CompanyType_CompanyType_Ship    CompanyType = 3
)

// Enum value maps for CompanyType.
var (
	CompanyType_name = map[int32]string{
		0: "CompanyType_Airline",
		1: "CompanyType_Bus",
		2: "CompanyType_Rail",
		3: "CompanyType_Ship",
	}
	CompanyType_value = map[string]int32{
		"CompanyType_Airline": 0,
		"CompanyType_Bus":     1,
		"CompanyType_Rail":    2,
		"CompanyType_Ship":    3,
	}
)

func (x CompanyType) Enum() *CompanyType {
	p := new(CompanyType)
	*p = x
	return p
}

func (x CompanyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompanyType) Descriptor() protoreflect.EnumDescriptor {
	return file_transportation_company_proto_enumTypes[0].Descriptor()
}

func (CompanyType) Type() protoreflect.EnumType {
	return &file_transportation_company_proto_enumTypes[0]
}

func (x CompanyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompanyType.Descriptor instead.
func (CompanyType) EnumDescriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{0}
}

type CompanyStatus int32

const (
	CompanyStatus_CompanyStatus_Active  CompanyStatus = 0
	CompanyStatus_CompanyStatus_Blocked CompanyStatus = 1
)

// Enum value maps for CompanyStatus.
var (
	CompanyStatus_name = map[int32]string{
		0: "CompanyStatus_Active",
		1: "CompanyStatus_Blocked",
	}
	CompanyStatus_value = map[string]int32{
		"CompanyStatus_Active":  0,
		"CompanyStatus_Blocked": 1,
	}
)

func (x CompanyStatus) Enum() *CompanyStatus {
	p := new(CompanyStatus)
	*p = x
	return p
}

func (x CompanyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompanyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_transportation_company_proto_enumTypes[1].Descriptor()
}

func (CompanyStatus) Type() protoreflect.EnumType {
	return &file_transportation_company_proto_enumTypes[1]
}

func (x CompanyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompanyStatus.Descriptor instead.
func (CompanyStatus) EnumDescriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{1}
}

type TripStatus int32

const (
	TripStatus_TripStatus_Scheduled TripStatus = 0
	TripStatus_TripStatus_Cancelled TripStatus = 1
	TripStatus_TripStatus_Completed TripStatus = 2
)

// Enum value maps for TripStatus.
var (
	TripStatus_name = map[int32]string{
		0: "TripStatus_Scheduled",
		1: "TripStatus_Cancelled",
		2: "TripStatus_Completed",
	}
	TripStatus_value = map[string]int32{
		"TripStatus_Scheduled": 0,
		"TripStatus_Cancelled": 1,
		"TripStatus_Completed": 2,
	}
)

func (x TripStatus) Enum() *TripStatus {
	p := new(TripStatus)
	*p = x
	return p
}

func (x TripStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TripStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_transportation_company_proto_enumTypes[2].Descriptor()
}

func (TripStatus) Type() protoreflect.EnumType {
	return &file_transportation_company_proto_enumTypes[2]
}

func (x TripStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TripStatus.Descriptor instead.
func (TripStatus) EnumDescriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{2}
}

type UserType int32

const (
	UserType_UserType_NormalUser UserType = 0
	UserType_UserType_Agency     UserType = 1
)

// Enum value maps for UserType.
var (
	UserType_name = map[int32]string{
		0: "UserType_NormalUser",
		1: "UserType_Agency",
	}
	UserType_value = map[string]int32{
		"UserType_NormalUser": 0,
		"UserType_Agency":     1,
	}
)

func (x UserType) Enum() *UserType {
	p := new(UserType)
	*p = x
	return p
}

func (x UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_transportation_company_proto_enumTypes[3].Descriptor()
}

func (UserType) Type() protoreflect.EnumType {
	return &file_transportation_company_proto_enumTypes[3]
}

func (x UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserType.Descriptor instead.
func (UserType) EnumDescriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{3}
}

type Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId   string        `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	OwnerUserId string        `protobuf:"bytes,2,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`
	CompanyName string        `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	CompanyType CompanyType   `protobuf:"varint,4,opt,name=company_type,json=companyType,proto3,enum=CompanyType" json:"company_type,omitempty"`
	Status      CompanyStatus `protobuf:"varint,5,opt,name=status,proto3,enum=CompanyStatus" json:"status,omitempty"`
}

func (x *Company) Reset() {
	*x = Company{}
	mi := &file_transportation_company_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_transportation_company_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{0}
}

func (x *Company) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *Company) GetOwnerUserId() string {
	if x != nil {
		return x.OwnerUserId
	}
	return ""
}

func (x *Company) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *Company) GetCompanyType() CompanyType {
	if x != nil {
		return x.CompanyType
	}
	return CompanyType_CompanyType_Airline
}

func (x *Company) GetStatus() CompanyStatus {
	if x != nil {
		return x.Status
	}
	return CompanyStatus_CompanyStatus_Active
}

type Trip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TripId        string                 `protobuf:"bytes,1,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
	CompanyId     string                 `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	VehicleId     string                 `protobuf:"bytes,3,opt,name=vehicle_id,json=vehicleId,proto3" json:"vehicle_id,omitempty"`
	RouteId       string                 `protobuf:"bytes,4,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	Status        TripStatus             `protobuf:"varint,5,opt,name=status,proto3,enum=TripStatus" json:"status,omitempty"`
	DepartureTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=departure_time,json=departureTime,proto3" json:"departure_time,omitempty"`
	ArrivalTime   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=arrival_time,json=arrivalTime,proto3" json:"arrival_time,omitempty"`
	BaseFare      float32                `protobuf:"fixed32,8,opt,name=base_fare,json=baseFare,proto3" json:"base_fare,omitempty"`
}

func (x *Trip) Reset() {
	*x = Trip{}
	mi := &file_transportation_company_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trip) ProtoMessage() {}

func (x *Trip) ProtoReflect() protoreflect.Message {
	mi := &file_transportation_company_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trip.ProtoReflect.Descriptor instead.
func (*Trip) Descriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{1}
}

func (x *Trip) GetTripId() string {
	if x != nil {
		return x.TripId
	}
	return ""
}

func (x *Trip) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *Trip) GetVehicleId() string {
	if x != nil {
		return x.VehicleId
	}
	return ""
}

func (x *Trip) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *Trip) GetStatus() TripStatus {
	if x != nil {
		return x.Status
	}
	return TripStatus_TripStatus_Scheduled
}

func (x *Trip) GetDepartureTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DepartureTime
	}
	return nil
}

func (x *Trip) GetArrivalTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ArrivalTime
	}
	return nil
}

func (x *Trip) GetBaseFare() float32 {
	if x != nil {
		return x.BaseFare
	}
	return 0
}

type Tariff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TariffId string   `protobuf:"bytes,1,opt,name=tariff_id,json=tariffId,proto3" json:"tariff_id,omitempty"`
	TripId   string   `protobuf:"bytes,2,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
	UserType UserType `protobuf:"varint,3,opt,name=user_type,json=userType,proto3,enum=UserType" json:"user_type,omitempty"`
	Price    float32  `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *Tariff) Reset() {
	*x = Tariff{}
	mi := &file_transportation_company_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tariff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tariff) ProtoMessage() {}

func (x *Tariff) ProtoReflect() protoreflect.Message {
	mi := &file_transportation_company_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tariff.ProtoReflect.Descriptor instead.
func (*Tariff) Descriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{2}
}

func (x *Tariff) GetTariffId() string {
	if x != nil {
		return x.TariffId
	}
	return ""
}

func (x *Tariff) GetTripId() string {
	if x != nil {
		return x.TripId
	}
	return ""
}

func (x *Tariff) GetUserType() UserType {
	if x != nil {
		return x.UserType
	}
	return UserType_UserType_NormalUser
}

func (x *Tariff) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type TechnicalTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TechTeamId  string `protobuf:"bytes,1,opt,name=tech_team_id,json=techTeamId,proto3" json:"tech_team_id,omitempty"`
	CompanyId   string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	TeamName    string `protobuf:"bytes,3,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
	MemberCount int32  `protobuf:"varint,4,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
}

func (x *TechnicalTeam) Reset() {
	*x = TechnicalTeam{}
	mi := &file_transportation_company_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechnicalTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnicalTeam) ProtoMessage() {}

func (x *TechnicalTeam) ProtoReflect() protoreflect.Message {
	mi := &file_transportation_company_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechnicalTeam.ProtoReflect.Descriptor instead.
func (*TechnicalTeam) Descriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{3}
}

func (x *TechnicalTeam) GetTechTeamId() string {
	if x != nil {
		return x.TechTeamId
	}
	return ""
}

func (x *TechnicalTeam) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *TechnicalTeam) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *TechnicalTeam) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

type AssignTechnicalTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TripId     string `protobuf:"bytes,1,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
	TechTeamId string `protobuf:"bytes,2,opt,name=tech_team_id,json=techTeamId,proto3" json:"tech_team_id,omitempty"`
}

func (x *AssignTechnicalTeamRequest) Reset() {
	*x = AssignTechnicalTeamRequest{}
	mi := &file_transportation_company_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignTechnicalTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignTechnicalTeamRequest) ProtoMessage() {}

func (x *AssignTechnicalTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transportation_company_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignTechnicalTeamRequest.ProtoReflect.Descriptor instead.
func (*AssignTechnicalTeamRequest) Descriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{4}
}

func (x *AssignTechnicalTeamRequest) GetTripId() string {
	if x != nil {
		return x.TripId
	}
	return ""
}

func (x *AssignTechnicalTeamRequest) GetTechTeamId() string {
	if x != nil {
		return x.TechTeamId
	}
	return ""
}

type AssignTechnicalTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *AssignTechnicalTeamResponse) Reset() {
	*x = AssignTechnicalTeamResponse{}
	mi := &file_transportation_company_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignTechnicalTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignTechnicalTeamResponse) ProtoMessage() {}

func (x *AssignTechnicalTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transportation_company_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignTechnicalTeamResponse.ProtoReflect.Descriptor instead.
func (*AssignTechnicalTeamResponse) Descriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{5}
}

func (x *AssignTechnicalTeamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CreateTripRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trip *Trip `protobuf:"bytes,1,opt,name=trip,proto3" json:"trip,omitempty"`
}

func (x *CreateTripRequest) Reset() {
	*x = CreateTripRequest{}
	mi := &file_transportation_company_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTripRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTripRequest) ProtoMessage() {}

func (x *CreateTripRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transportation_company_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTripRequest.ProtoReflect.Descriptor instead.
func (*CreateTripRequest) Descriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTripRequest) GetTrip() *Trip {
	if x != nil {
		return x.Trip
	}
	return nil
}

type CreateTripResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	TripId  string `protobuf:"bytes,2,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
}

func (x *CreateTripResponse) Reset() {
	*x = CreateTripResponse{}
	mi := &file_transportation_company_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTripResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTripResponse) ProtoMessage() {}

func (x *CreateTripResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transportation_company_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTripResponse.ProtoReflect.Descriptor instead.
func (*CreateTripResponse) Descriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTripResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateTripResponse) GetTripId() string {
	if x != nil {
		return x.TripId
	}
	return ""
}

type UpdateTripStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TripId    string `protobuf:"bytes,1,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
	NewStatus string `protobuf:"bytes,2,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
}

func (x *UpdateTripStatusRequest) Reset() {
	*x = UpdateTripStatusRequest{}
	mi := &file_transportation_company_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTripStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTripStatusRequest) ProtoMessage() {}

func (x *UpdateTripStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transportation_company_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTripStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateTripStatusRequest) Descriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateTripStatusRequest) GetTripId() string {
	if x != nil {
		return x.TripId
	}
	return ""
}

func (x *UpdateTripStatusRequest) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

type UpdateTripStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpdateTripStatusResponse) Reset() {
	*x = UpdateTripStatusResponse{}
	mi := &file_transportation_company_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTripStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTripStatusResponse) ProtoMessage() {}

func (x *UpdateTripStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transportation_company_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTripStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateTripStatusResponse) Descriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateTripStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListCompanyTripsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *ListCompanyTripsRequest) Reset() {
	*x = ListCompanyTripsRequest{}
	mi := &file_transportation_company_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCompanyTripsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyTripsRequest) ProtoMessage() {}

func (x *ListCompanyTripsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transportation_company_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyTripsRequest.ProtoReflect.Descriptor instead.
func (*ListCompanyTripsRequest) Descriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{10}
}

func (x *ListCompanyTripsRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

type ListCompanyTripsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trips []*Trip `protobuf:"bytes,1,rep,name=trips,proto3" json:"trips,omitempty"`
}

func (x *ListCompanyTripsResponse) Reset() {
	*x = ListCompanyTripsResponse{}
	mi := &file_transportation_company_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCompanyTripsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyTripsResponse) ProtoMessage() {}

func (x *ListCompanyTripsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transportation_company_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyTripsResponse.ProtoReflect.Descriptor instead.
func (*ListCompanyTripsResponse) Descriptor() ([]byte, []int) {
	return file_transportation_company_proto_rawDescGZIP(), []int{11}
}

func (x *ListCompanyTripsResponse) GetTrips() []*Trip {
	if x != nil {
		return x.Trips
	}
	return nil
}

var File_transportation_company_proto protoreflect.FileDescriptor

var file_transportation_company_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc8, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x04, 0x54,
	0x72, 0x69, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x0c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x61, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x46, 0x61, 0x72, 0x65, 0x22, 0x7c, 0x0a, 0x06, 0x54, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x72, 0x69, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x63,
	0x68, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x65, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x57, 0x0a, 0x1a, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x69, 0x70, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x1b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x2e, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x72, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x52, 0x04, 0x74, 0x72, 0x69, 0x70, 0x22, 0x47, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x72, 0x69, 0x70, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x72, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x38,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x72, 0x69,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x72, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x05, 0x74, 0x72, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x52, 0x05, 0x74, 0x72, 0x69, 0x70,
	0x73, 0x2a, 0x67, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x75, 0x73, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61,
	0x69, 0x6c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x68, 0x69, 0x70, 0x10, 0x03, 0x2a, 0x44, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x01,
	0x2a, 0x5a, 0x0a, 0x0a, 0x54, 0x72, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x14, 0x54, 0x72, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x38, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x10, 0x01, 0x32, 0xb9, 0x02, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x69, 0x70, 0x12, 0x12, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1b,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x72, 0x69, 0x70, 0x73, 0x12, 0x18, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x72, 0x69, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x72, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x51, 0x42, 0x43, 0x38, 0x2d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x35, 0x2f, 0x67, 0x68, 0x6f,
	0x6c, 0x69, 0x62, 0x61, 0x62, 0x61, 0x5f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transportation_company_proto_rawDescOnce sync.Once
	file_transportation_company_proto_rawDescData = file_transportation_company_proto_rawDesc
)

func file_transportation_company_proto_rawDescGZIP() []byte {
	file_transportation_company_proto_rawDescOnce.Do(func() {
		file_transportation_company_proto_rawDescData = protoimpl.X.CompressGZIP(file_transportation_company_proto_rawDescData)
	})
	return file_transportation_company_proto_rawDescData
}

var file_transportation_company_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_transportation_company_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_transportation_company_proto_goTypes = []any{
	(CompanyType)(0),                    // 0: CompanyType
	(CompanyStatus)(0),                  // 1: CompanyStatus
	(TripStatus)(0),                     // 2: TripStatus
	(UserType)(0),                       // 3: UserType
	(*Company)(nil),                     // 4: Company
	(*Trip)(nil),                        // 5: Trip
	(*Tariff)(nil),                      // 6: Tariff
	(*TechnicalTeam)(nil),               // 7: TechnicalTeam
	(*AssignTechnicalTeamRequest)(nil),  // 8: AssignTechnicalTeamRequest
	(*AssignTechnicalTeamResponse)(nil), // 9: AssignTechnicalTeamResponse
	(*CreateTripRequest)(nil),           // 10: CreateTripRequest
	(*CreateTripResponse)(nil),          // 11: CreateTripResponse
	(*UpdateTripStatusRequest)(nil),     // 12: UpdateTripStatusRequest
	(*UpdateTripStatusResponse)(nil),    // 13: UpdateTripStatusResponse
	(*ListCompanyTripsRequest)(nil),     // 14: ListCompanyTripsRequest
	(*ListCompanyTripsResponse)(nil),    // 15: ListCompanyTripsResponse
	(*timestamppb.Timestamp)(nil),       // 16: google.protobuf.Timestamp
}
var file_transportation_company_proto_depIdxs = []int32{
	0,  // 0: Company.company_type:type_name -> CompanyType
	1,  // 1: Company.status:type_name -> CompanyStatus
	2,  // 2: Trip.status:type_name -> TripStatus
	16, // 3: Trip.departure_time:type_name -> google.protobuf.Timestamp
	16, // 4: Trip.arrival_time:type_name -> google.protobuf.Timestamp
	3,  // 5: Tariff.user_type:type_name -> UserType
	5,  // 6: CreateTripRequest.trip:type_name -> Trip
	5,  // 7: ListCompanyTripsResponse.trips:type_name -> Trip
	10, // 8: TransportationCompanyService.CreateTrip:input_type -> CreateTripRequest
	12, // 9: TransportationCompanyService.UpdateTripStatus:input_type -> UpdateTripStatusRequest
	8,  // 10: TransportationCompanyService.AssignTechnicalTeam:input_type -> AssignTechnicalTeamRequest
	14, // 11: TransportationCompanyService.ListCompanyTrips:input_type -> ListCompanyTripsRequest
	11, // 12: TransportationCompanyService.CreateTrip:output_type -> CreateTripResponse
	13, // 13: TransportationCompanyService.UpdateTripStatus:output_type -> UpdateTripStatusResponse
	9,  // 14: TransportationCompanyService.AssignTechnicalTeam:output_type -> AssignTechnicalTeamResponse
	15, // 15: TransportationCompanyService.ListCompanyTrips:output_type -> ListCompanyTripsResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_transportation_company_proto_init() }
func file_transportation_company_proto_init() {
	if File_transportation_company_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transportation_company_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transportation_company_proto_goTypes,
		DependencyIndexes: file_transportation_company_proto_depIdxs,
		EnumInfos:         file_transportation_company_proto_enumTypes,
		MessageInfos:      file_transportation_company_proto_msgTypes,
	}.Build()
	File_transportation_company_proto = out.File
	file_transportation_company_proto_rawDesc = nil
	file_transportation_company_proto_goTypes = nil
	file_transportation_company_proto_depIdxs = nil
}
