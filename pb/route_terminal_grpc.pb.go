// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: route_terminal.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RouteTerminalService_CreateTerminal_FullMethodName = "/RouteTerminalService/CreateTerminal"
	RouteTerminalService_CreateRoute_FullMethodName    = "/RouteTerminalService/CreateRoute"
	RouteTerminalService_GetRouteInfo_FullMethodName   = "/RouteTerminalService/GetRouteInfo"
)

// RouteTerminalServiceClient is the client API for RouteTerminalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteTerminalServiceClient interface {
	CreateTerminal(ctx context.Context, in *CreateTerminalRequest, opts ...grpc.CallOption) (*CreateTerminalResponse, error)
	CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*CreateRouteResponse, error)
	GetRouteInfo(ctx context.Context, in *GetRouteInfoRequest, opts ...grpc.CallOption) (*GetRouteInfoResponse, error)
}

type routeTerminalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteTerminalServiceClient(cc grpc.ClientConnInterface) RouteTerminalServiceClient {
	return &routeTerminalServiceClient{cc}
}

func (c *routeTerminalServiceClient) CreateTerminal(ctx context.Context, in *CreateTerminalRequest, opts ...grpc.CallOption) (*CreateTerminalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTerminalResponse)
	err := c.cc.Invoke(ctx, RouteTerminalService_CreateTerminal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeTerminalServiceClient) CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*CreateRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRouteResponse)
	err := c.cc.Invoke(ctx, RouteTerminalService_CreateRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeTerminalServiceClient) GetRouteInfo(ctx context.Context, in *GetRouteInfoRequest, opts ...grpc.CallOption) (*GetRouteInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRouteInfoResponse)
	err := c.cc.Invoke(ctx, RouteTerminalService_GetRouteInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteTerminalServiceServer is the server API for RouteTerminalService service.
// All implementations must embed UnimplementedRouteTerminalServiceServer
// for forward compatibility.
type RouteTerminalServiceServer interface {
	CreateTerminal(context.Context, *CreateTerminalRequest) (*CreateTerminalResponse, error)
	CreateRoute(context.Context, *CreateRouteRequest) (*CreateRouteResponse, error)
	GetRouteInfo(context.Context, *GetRouteInfoRequest) (*GetRouteInfoResponse, error)
	mustEmbedUnimplementedRouteTerminalServiceServer()
}

// UnimplementedRouteTerminalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRouteTerminalServiceServer struct{}

func (UnimplementedRouteTerminalServiceServer) CreateTerminal(context.Context, *CreateTerminalRequest) (*CreateTerminalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTerminal not implemented")
}
func (UnimplementedRouteTerminalServiceServer) CreateRoute(context.Context, *CreateRouteRequest) (*CreateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoute not implemented")
}
func (UnimplementedRouteTerminalServiceServer) GetRouteInfo(context.Context, *GetRouteInfoRequest) (*GetRouteInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteInfo not implemented")
}
func (UnimplementedRouteTerminalServiceServer) mustEmbedUnimplementedRouteTerminalServiceServer() {}
func (UnimplementedRouteTerminalServiceServer) testEmbeddedByValue()                              {}

// UnsafeRouteTerminalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteTerminalServiceServer will
// result in compilation errors.
type UnsafeRouteTerminalServiceServer interface {
	mustEmbedUnimplementedRouteTerminalServiceServer()
}

func RegisterRouteTerminalServiceServer(s grpc.ServiceRegistrar, srv RouteTerminalServiceServer) {
	// If the following call pancis, it indicates UnimplementedRouteTerminalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RouteTerminalService_ServiceDesc, srv)
}

func _RouteTerminalService_CreateTerminal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTerminalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteTerminalServiceServer).CreateTerminal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteTerminalService_CreateTerminal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteTerminalServiceServer).CreateTerminal(ctx, req.(*CreateTerminalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteTerminalService_CreateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteTerminalServiceServer).CreateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteTerminalService_CreateRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteTerminalServiceServer).CreateRoute(ctx, req.(*CreateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteTerminalService_GetRouteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteTerminalServiceServer).GetRouteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteTerminalService_GetRouteInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteTerminalServiceServer).GetRouteInfo(ctx, req.(*GetRouteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteTerminalService_ServiceDesc is the grpc.ServiceDesc for RouteTerminalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteTerminalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RouteTerminalService",
	HandlerType: (*RouteTerminalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTerminal",
			Handler:    _RouteTerminalService_CreateTerminal_Handler,
		},
		{
			MethodName: "CreateRoute",
			Handler:    _RouteTerminalService_CreateRoute_Handler,
		},
		{
			MethodName: "GetRouteInfo",
			Handler:    _RouteTerminalService_GetRouteInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "route_terminal.proto",
}
