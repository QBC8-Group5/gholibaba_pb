// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HotelServiceClient is the client API for HotelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotelServiceClient interface {
	CreateHotel(ctx context.Context, in *CreateHotelRequest, opts ...grpc.CallOption) (*CreateHotelResponse, error)
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	ReserveRoom(ctx context.Context, in *ReserveRoomRequest, opts ...grpc.CallOption) (*ReserveRoomResponse, error)
	ConfirmCheckout(ctx context.Context, in *ConfirmCheckoutRequest, opts ...grpc.CallOption) (*ConfirmCheckoutResponse, error)
}

type hotelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelServiceClient(cc grpc.ClientConnInterface) HotelServiceClient {
	return &hotelServiceClient{cc}
}

func (c *hotelServiceClient) CreateHotel(ctx context.Context, in *CreateHotelRequest, opts ...grpc.CallOption) (*CreateHotelResponse, error) {
	out := new(CreateHotelResponse)
	err := c.cc.Invoke(ctx, "/HotelService/CreateHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, "/HotelService/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) ReserveRoom(ctx context.Context, in *ReserveRoomRequest, opts ...grpc.CallOption) (*ReserveRoomResponse, error) {
	out := new(ReserveRoomResponse)
	err := c.cc.Invoke(ctx, "/HotelService/ReserveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelServiceClient) ConfirmCheckout(ctx context.Context, in *ConfirmCheckoutRequest, opts ...grpc.CallOption) (*ConfirmCheckoutResponse, error) {
	out := new(ConfirmCheckoutResponse)
	err := c.cc.Invoke(ctx, "/HotelService/ConfirmCheckout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelServiceServer is the server API for HotelService service.
// All implementations must embed UnimplementedHotelServiceServer
// for forward compatibility
type HotelServiceServer interface {
	CreateHotel(context.Context, *CreateHotelRequest) (*CreateHotelResponse, error)
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	ReserveRoom(context.Context, *ReserveRoomRequest) (*ReserveRoomResponse, error)
	ConfirmCheckout(context.Context, *ConfirmCheckoutRequest) (*ConfirmCheckoutResponse, error)
	mustEmbedUnimplementedHotelServiceServer()
}

// UnimplementedHotelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHotelServiceServer struct {
}

func (UnimplementedHotelServiceServer) CreateHotel(context.Context, *CreateHotelRequest) (*CreateHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHotel not implemented")
}
func (UnimplementedHotelServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedHotelServiceServer) ReserveRoom(context.Context, *ReserveRoomRequest) (*ReserveRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveRoom not implemented")
}
func (UnimplementedHotelServiceServer) ConfirmCheckout(context.Context, *ConfirmCheckoutRequest) (*ConfirmCheckoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmCheckout not implemented")
}
func (UnimplementedHotelServiceServer) mustEmbedUnimplementedHotelServiceServer() {}

// UnsafeHotelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelServiceServer will
// result in compilation errors.
type UnsafeHotelServiceServer interface {
	mustEmbedUnimplementedHotelServiceServer()
}

func RegisterHotelServiceServer(s *grpc.Server, srv HotelServiceServer) {
	s.RegisterService(&_HotelService_serviceDesc, srv)
}

func _HotelService_CreateHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).CreateHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotelService/CreateHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).CreateHotel(ctx, req.(*CreateHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotelService/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_ReserveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).ReserveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotelService/ReserveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).ReserveRoom(ctx, req.(*ReserveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HotelService_ConfirmCheckout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmCheckoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).ConfirmCheckout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HotelService/ConfirmCheckout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).ConfirmCheckout(ctx, req.(*ConfirmCheckoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HotelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "HotelService",
	HandlerType: (*HotelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHotel",
			Handler:    _HotelService_CreateHotel_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _HotelService_CreateRoom_Handler,
		},
		{
			MethodName: "ReserveRoom",
			Handler:    _HotelService_ReserveRoom_Handler,
		},
		{
			MethodName: "ConfirmCheckout",
			Handler:    _HotelService_ConfirmCheckout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotel.proto",
}
