// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TravelAgencyServiceClient is the client API for TravelAgencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TravelAgencyServiceClient interface {
	CreateTour(ctx context.Context, in *CreateTourRequest, opts ...grpc.CallOption) (*CreateTourResponse, error)
	CreateTourPackage(ctx context.Context, in *CreateTourPackageRequest, opts ...grpc.CallOption) (*CreateTourPackageResponse, error)
	ListTours(ctx context.Context, in *ListToursRequest, opts ...grpc.CallOption) (*ListToursResponse, error)
}

type travelAgencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTravelAgencyServiceClient(cc grpc.ClientConnInterface) TravelAgencyServiceClient {
	return &travelAgencyServiceClient{cc}
}

func (c *travelAgencyServiceClient) CreateTour(ctx context.Context, in *CreateTourRequest, opts ...grpc.CallOption) (*CreateTourResponse, error) {
	out := new(CreateTourResponse)
	err := c.cc.Invoke(ctx, "/TravelAgencyService/CreateTour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelAgencyServiceClient) CreateTourPackage(ctx context.Context, in *CreateTourPackageRequest, opts ...grpc.CallOption) (*CreateTourPackageResponse, error) {
	out := new(CreateTourPackageResponse)
	err := c.cc.Invoke(ctx, "/TravelAgencyService/CreateTourPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelAgencyServiceClient) ListTours(ctx context.Context, in *ListToursRequest, opts ...grpc.CallOption) (*ListToursResponse, error) {
	out := new(ListToursResponse)
	err := c.cc.Invoke(ctx, "/TravelAgencyService/ListTours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TravelAgencyServiceServer is the server API for TravelAgencyService service.
// All implementations must embed UnimplementedTravelAgencyServiceServer
// for forward compatibility
type TravelAgencyServiceServer interface {
	CreateTour(context.Context, *CreateTourRequest) (*CreateTourResponse, error)
	CreateTourPackage(context.Context, *CreateTourPackageRequest) (*CreateTourPackageResponse, error)
	ListTours(context.Context, *ListToursRequest) (*ListToursResponse, error)
	mustEmbedUnimplementedTravelAgencyServiceServer()
}

// UnimplementedTravelAgencyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTravelAgencyServiceServer struct {
}

func (UnimplementedTravelAgencyServiceServer) CreateTour(context.Context, *CreateTourRequest) (*CreateTourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTour not implemented")
}
func (UnimplementedTravelAgencyServiceServer) CreateTourPackage(context.Context, *CreateTourPackageRequest) (*CreateTourPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTourPackage not implemented")
}
func (UnimplementedTravelAgencyServiceServer) ListTours(context.Context, *ListToursRequest) (*ListToursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTours not implemented")
}
func (UnimplementedTravelAgencyServiceServer) mustEmbedUnimplementedTravelAgencyServiceServer() {}

// UnsafeTravelAgencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TravelAgencyServiceServer will
// result in compilation errors.
type UnsafeTravelAgencyServiceServer interface {
	mustEmbedUnimplementedTravelAgencyServiceServer()
}

func RegisterTravelAgencyServiceServer(s *grpc.Server, srv TravelAgencyServiceServer) {
	s.RegisterService(&_TravelAgencyService_serviceDesc, srv)
}

func _TravelAgencyService_CreateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelAgencyServiceServer).CreateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TravelAgencyService/CreateTour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelAgencyServiceServer).CreateTour(ctx, req.(*CreateTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelAgencyService_CreateTourPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelAgencyServiceServer).CreateTourPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TravelAgencyService/CreateTourPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelAgencyServiceServer).CreateTourPackage(ctx, req.(*CreateTourPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelAgencyService_ListTours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListToursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelAgencyServiceServer).ListTours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TravelAgencyService/ListTours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelAgencyServiceServer).ListTours(ctx, req.(*ListToursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TravelAgencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TravelAgencyService",
	HandlerType: (*TravelAgencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTour",
			Handler:    _TravelAgencyService_CreateTour_Handler,
		},
		{
			MethodName: "CreateTourPackage",
			Handler:    _TravelAgencyService_CreateTourPackage_Handler,
		},
		{
			MethodName: "ListTours",
			Handler:    _TravelAgencyService_ListTours_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "travel_agency.proto",
}
